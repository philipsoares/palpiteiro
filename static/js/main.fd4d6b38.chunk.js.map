{"version":3,"sources":["components/games/Games.js","components/results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Games","props","games","require","rows","i","length","push","key","onClick","draw","bind","this","style","backgroundPosition","position","nome","className","Results","actual","results","App","state","game","sortear","number","Math","floor","random","total","toString","padStart","includes","map","index","animationDelay","setState","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"isBAKe,SAASA,EAAMC,GAK5B,IAJA,IAAIC,EAAQC,EAAQ,IAEhBC,EAAO,GAEFC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAChCD,EAAKG,KACH,wBACEC,IAAKH,EACLI,QAASR,EAAMS,KAAKC,KAAKC,KAAMV,EAAMG,IACrCQ,MAAO,CAAEC,mBAAoBZ,EAAMG,GAAGU,WAErCb,EAAMG,GAAGW,OAMhB,OACE,6BAASC,UAAU,SACjB,4BAAKb,I,MCtBI,SAASc,EAAQjB,GAC9B,OACE,6BAASgB,UAAU,WACjB,wBAAIA,UAAWhB,EAAMkB,QAASlB,EAAMmB,U,ICwD3BC,E,YAxDb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDqB,MAAQ,CACXH,OAAQ,GACRC,QAAS,IAGX,EAAKV,KAAO,EAAKA,KAAKC,KAAV,gBARK,E,kEAWdY,GAIH,IAJU,IAAD,OACLH,EAAU,GACVf,EAAI,EAEDA,EAAIkB,EAAKC,SAAS,CACvB,IAAIC,EAASC,KAAKC,MAAMD,KAAKE,SAAWL,EAAKM,OAAS,EAElDJ,EAAS,KACXA,EAASA,EAAOK,WAAWC,SAAS,EAAG,MAGpCX,EAAQY,SAASP,KACpBL,EAAQb,KAAKkB,GACbpB,KAIJe,EAAUA,EAAQa,KAAI,SAACR,EAAQS,GAAT,OACpB,wBAAI1B,IAAKiB,EAAQZ,MAAO,CAAEsB,iBAAkBD,EAAQ,EAAI,MACrDT,MAKLb,KAAKwB,SAAS,CAAEhB,QAAS,GAAID,OAAQI,EAAKc,KAAM,WAC9C,EAAKD,SAAS,CAAEhB,QAASA,S,+BAK3B,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,UAChB,mDACA,wFAGF,kBAAC,EAAD,CAAOP,KAAME,KAAKF,OAElB,kBAAC,EAAD,CAASS,OAAQP,KAAKU,MAAMH,OAAQC,QAASR,KAAKU,MAAMF,e,GAnD9CkB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fd4d6b38.chunk.js","sourcesContent":["import React from \"react\";\nimport { Router, Link } from \"react-router-dom\";\n\nimport \"./Games.scss\";\n\nexport default function Games(props) {\n  let games = require(\"./games.json\");\n\n  let rows = [];\n\n  for (let i = 0; i < games.length; i++) {\n    rows.push(\n      <li\n        key={i}\n        onClick={props.draw.bind(this, games[i])}\n        style={{ backgroundPosition: games[i].position }}\n      >\n        {games[i].nome}\n        {/* <Link to={\"/game\" + games[i].id}>{games[i].nome}</Link> */}\n      </li>\n    );\n  }\n\n  return (\n    <section className=\"games\">\n      <ul>{rows}</ul>\n    </section>\n  );\n}\n","import React from \"react\";\nimport \"./Results.scss\";\n\nexport default function Results(props) {\n  return (\n    <section className=\"results\">\n      <ul className={props.actual}>{props.results}</ul>\n    </section>\n  );\n}\n","import React from \"react\";\nimport \"./App.scss\";\nimport Games from \"./components/games/Games\";\nimport Results from \"./components/results/Results\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      actual: \"\",\n      results: \"\",\n    };\n\n    this.draw = this.draw.bind(this);\n  }\n\n  draw(game) {\n    let results = [];\n    let i = 0;\n\n    while (i < game.sortear) {\n      let number = Math.floor(Math.random() * game.total) + 1;\n\n      if (number < 10) {\n        number = number.toString().padStart(2, \"0\");\n      }\n\n      if (!results.includes(number)) {\n        results.push(number);\n        i++;\n      }\n    }\n\n    results = results.map((number, index) => (\n      <li key={number} style={{ animationDelay: ++index / 2 + \"s\" }}>\n        {number}\n      </li>\n    ));\n\n    //console.log(results);\n    this.setState({ results: \"\", actual: game.id }, () => {\n      this.setState({ results: results });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          <h2>Palpiteiro da Sorte</h2>\n          <p>Escolha um dos seus jogos favoritos para gerar palpites.</p>\n        </header>\n\n        <Games draw={this.draw} />\n\n        <Results actual={this.state.actual} results={this.state.results} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}